{"version":3,"file":"beats-per.js","sourceRoot":"","sources":["../beats-per.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, type PropertyValueMap, html } from 'lit'\nimport { customElement, property, state } from 'lit/decorators.js'\n\n/**\n * @tag beats-per\n * @summary Calculate the beats per minute through interaction.\n */\n@customElement('beats-per')\nexport default class BeatsPer extends LitElement {\n\t/**\n\t * Amount of time in milliseconds to wait between taps before restarting the count.\n\t *\n\t * @example\n\t * ```html\n\t * <beats-per timelimit=\"3000\"></beats-per>\n\t * ```\n\t */\n\t@property({ type: Number })\n\tpublic timeLimit: number = 2000\n\n\t/** Number of taps in current session. */\n\t@state()\n\tprivate count: number = 0\n\n\t/** MS of the current tap. */\n\t@state()\n\tprivate msCurrent: number = 0\n\n\t/** MS of the previous tap. */\n\t@state()\n\tprivate msPrevious: number = 0\n\n\t/** Average number of beats per minute, not rounded. */\n\t@state()\n\tprivate bpmAvg: number = 0\n\n\t/** Average number of beats rounded to the nearest integer. */\n\tprivate get bpm(): number {\n\t\treturn Math.round(this.bpmAvg)\n\t}\n\n\t/** Slotted button to trigger the counting. */\n\tprivate get buttonElement(): HTMLButtonElement | null {\n\t\treturn this.querySelector('[data-bp-button]')\n\t}\n\n\t/** Element to keep track of the BPM. */\n\tprivate get bpmElement(): Element | null {\n\t\treturn this.querySelector('[data-bp-bpm]')\n\t}\n\n\t/** Element to keep track of the click count. */\n\tprivate get countElement(): Element | null {\n\t\treturn this.querySelector('[data-bp-count]')\n\t}\n\n\t/** Reset the count when the time limit has been reached. */\n\tprivate resetCount(): void {\n\t\tthis.count = 0\n\t}\n\n\t/** Calculates the BPM on click. */\n\tprivate handleClick: () => void = (): void => {\n\t\tconst ms = new Date().getTime()\n\n\t\tif (ms - this.msPrevious > this.timeLimit) this.resetCount()\n\n\t\tif (this.count === 0) {\n\t\t\tthis.bpmAvg = 0\n\t\t\tthis.msCurrent = ms\n\t\t\tthis.count++\n\t\t} else {\n\t\t\tthis.bpmAvg = (60000 * this.count) / (ms - this.msCurrent)\n\t\t\tthis.count++\n\t\t}\n\n\t\tthis.msPrevious = ms\n\t}\n\n\t/** Updates the element that holds the count. */\n\tprivate updateCount(): void {\n\t\tif (this.countElement) {\n\t\t\tthis.countElement.textContent = this.count.toString()\n\t\t}\n\t}\n\n\t/** Updates the element that holds the BPM count. */\n\tprivate updateBPM(): void {\n\t\tif (this.bpmElement) {\n\t\t\tthis.bpmElement.textContent = this.bpm.toString()\n\t\t}\n\t}\n\n\toverride connectedCallback(): void {\n\t\tsuper.connectedCallback()\n\n\t\tthis.buttonElement?.addEventListener('click', this.handleClick)\n\t}\n\n\t// Uses updated since these methods update external elements\n\tprotected override updated(\n\t\tchangedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n\t): void {\n\t\tif (changedProperties.has('count')) {\n\t\t\tthis.updateCount()\n\t\t}\n\n\t\tif (changedProperties.has('bpmAvg')) {\n\t\t\tthis.updateBPM()\n\t\t}\n\t}\n\n\tprotected render() {\n\t\treturn html`<slot></slot>`\n\t}\n}\n"]}